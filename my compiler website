<html>
  <title>
    Cism website
  </title>
  
  <body>
    <h1>This is the website that we created and hosted the compiler we designed</h1>
    <p> program Cradle;

{-----------------------}
{ Constant Declarations}

const TAB = ^I;

{-----------------------}
{ Variable Declarations}

var Look: char;			{ Lookahead Character}

{-----------------------}
{ Read New Character From Input Stream}

procedure GetChar;
begin
	Read(Look);
end;

{-----------------------}

procedure Error (s: string);
begin
	WriteLn;
	WriteLn(^G, 'Error: ', s, '.');
end;

{-----------------------}

procedure Abort(s: string);
begin
	Error(s);
	Halt;
end;
{-----------------------}

{Report what was expected}

procedure Expected (s: string);
begin
	Abort (s + 'Expected');
end;

{-----------------------------------}

{Match a Specific Input Character}

procedure Match(x: char);
begin
	if Look = x then GetChar
	else Expected('''' + x + '''');
end;

{-----------------------------------}

{Recognize an Alpha Characters}

function IsAlpha(c: char): boolean;
begin
	IsAlpha := upcase(c) in ['A'..'Z'];
end;
{-----------------------------------}

{ Recognize a Decimal Digit }

function IsDigit(c: char): boolean;
begin
	IsDigit := c in ['0'..'9'];
end;
{-----------------------------------}

{ Get an Identifier}

function GetName: char;
begin
	if not IsAlpha(Look) then Expected('Name');
	GetName := UpCase(Look);
	GetChar;
end;
{-----------------------------------}

{Get a Number}

function GetNum: char;
begin
	if not IsDigit(Look) then Expected('Integer');
	GetNum := Look;
	GetChar;
end;

{-----------------------------------}

{Output a String with Tab}

procedure Emit(s: string);
begin
	Write(TAB, s);
end;
{-----------------------------------}

{Output a String with Tab and CRLF}

procedure EmitLn(s: string);
begin
	Emit(s);
	WriteLn;
end;
{-----------------------------------}

{Recognize a Term Expression}

procedure Term;
begin
	EmitLn('MOVE #' + GetNum + ',D0');
end;
{-----------------------------------}


{Reccognize and translate a division}

procedure Division;
begin
	Match('/');
	Term;
	EmitLn('MOVE (SP)+,D1');
	EmitLn('DIVS D1,D0');
end;
{-----------------------------------}

{Recognize and translate a Multiplication}

procedure Multiplication;
begin
	Match('*');
	Term;
	EmitLn('MULS (SP)+,D0');
end;
{-----------------------------------}

{Parse and TransLate a Math Expression}
procedure Expression;
begin
	Term;
	while Look in ['*','/'] do begin
	EmitLn('MOVE D0,-(SP)');
	case Look of
	'/': Division;
	'*': Multiplication;
	else Expected('Mulop');
	end;
	end;
end;
{-----------------------------------}

{Initialize}

procedure Initialize;
begin
	GetChar;
end;
{-----------------------------------}

{Main Program}
begin
	Initialize;
end.
{-----------------------------------}.  </p
  </body>
  
  <style>
    body {
      background-color:blue;
      color:#fff;
      text-align:center;
    }
  </style>
  
</html>
